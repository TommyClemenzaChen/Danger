"""Visualization tool for checking self driving car's pose labels

This tool combines n point clouds using the pose labels generated by the converter.
A sensible combined point cloud (without any misalignment) indicates correct pose labels

"""

from os.path import join, basename, splitext
from glob import glob
import numpy as np
import open3d as o3d

pose_load_dir = '/home/alex/github/waymo_to_kitti_converter/tools/pose/pose'
pc_load_dir = '/home/alex/github/waymo_to_kitti_converter/tools/pose/velodyne'
num_pc = 10


def transform(pc, T):
    assert pc.shape[1] == 3
    pc = np.concatenate([pc, np.ones((pc.shape[0], 1))], axis=1)
    assert pc.shape[1] == 4
    transformed_pc = T @ np.transpose(pc)
    transformed_pc = np.transpose(transformed_pc)
    assert transformed_pc.shape[1] == 4
    transformed_pc = transformed_pc[:, :3]
    assert transformed_pc.shape[1] == 3
    return transformed_pc


def get_axis(T, size=1):
    axis = o3d.geometry.TriangleMesh.create_coordinate_frame(
        size=size, origin=[0, 0, 0])
    axis.rotate(T[:3, :3])
    axis.translate(T[:3, 3])
    return axis


def main():
    combined_pc = []
    axes = []
    T_anchor = None

    pose_pathnames = sorted(glob(join(pose_load_dir, '*.txt')))[:num_pc]
    for pose_pathname in pose_pathnames:
        T = np.loadtxt(pose_pathname)
        if T_anchor is None:  # take the first frame to be anchor
            T_anchor = T.copy()

        # original T: transform from car frame to global frame
        # new T: transform from car frame to anchor frame
        T = np.linalg.inv(T_anchor) @ T

        # visualize SDC axis
        axis = get_axis(T, size=1)
        axes.append(axis)

        # load pc
        stem, ext = splitext(basename(pose_pathname))
        pc_pathname = join(pc_load_dir, stem + '.bin')
        pc = np.fromfile(pc_pathname, dtype=np.float32).reshape(-1, 4)[:, :3]

        # transformed_pc = transform(pc, np.linalg.inv(T))
        transformed_pc = transform(pc, T)
        combined_pc.append(transformed_pc)

    combined_pc = np.concatenate(combined_pc, axis=0)

    # visualize combined pc
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(combined_pc)

    visual = [pcd]
    visual.extend(axes)
    o3d.visualization.draw_geometries(visual)


if __name__ == '__main__':
    main()
